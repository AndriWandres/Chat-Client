// <auto-generated />
using System;
using ChatApp.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChatApp.Api.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20190911153034_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChatApp.Api.Models.Domain.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int?>("ProfileImageId");

                    b.HasKey("UserId");

                    b.HasIndex("ProfileImageId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.DisplayImage", b =>
                {
                    b.Property<int>("DisplayImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.HasKey("DisplayImageId");

                    b.ToTable("DisplayImage");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int?>("GroupImageId");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.HasIndex("GroupImageId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.GroupMembership", b =>
                {
                    b.Property<int>("GroupMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsAdmin");

                    b.Property<int>("UserId");

                    b.HasKey("GroupMembershipId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMemberships");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<byte[]>("FileContent");

                    b.Property<byte[]>("ImageContent");

                    b.Property<bool>("IsEdited");

                    b.Property<bool>("IsForwarded");

                    b.Property<int?>("ParentId");

                    b.Property<string>("TextContent");

                    b.Property<byte[]>("VideoContent");

                    b.HasKey("MessageId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.MessageRecipient", b =>
                {
                    b.Property<int>("MessageRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead");

                    b.Property<int>("MessageId");

                    b.Property<int?>("RecipientGroupId");

                    b.Property<int?>("RecipientUserId");

                    b.HasKey("MessageRecipientId");

                    b.HasIndex("MessageId");

                    b.HasIndex("RecipientGroupId");

                    b.HasIndex("RecipientUserId");

                    b.ToTable("MessageRecipients");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.AppUser", b =>
                {
                    b.HasOne("ChatApp.Api.Models.Domain.DisplayImage", "ProfileImage")
                        .WithMany()
                        .HasForeignKey("ProfileImageId");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.Group", b =>
                {
                    b.HasOne("ChatApp.Api.Models.Domain.DisplayImage", "GroupImage")
                        .WithMany()
                        .HasForeignKey("GroupImageId");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.GroupMembership", b =>
                {
                    b.HasOne("ChatApp.Api.Models.Domain.Group", "Group")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatApp.Api.Models.Domain.AppUser", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.Message", b =>
                {
                    b.HasOne("ChatApp.Api.Models.Domain.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatApp.Api.Models.Domain.Message", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("ChatApp.Api.Models.Domain.MessageRecipient", b =>
                {
                    b.HasOne("ChatApp.Api.Models.Domain.Message", "Message")
                        .WithMany("MessageRecipients")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatApp.Api.Models.Domain.GroupMembership", "RecipientGroup")
                        .WithMany()
                        .HasForeignKey("RecipientGroupId");

                    b.HasOne("ChatApp.Api.Models.Domain.AppUser", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
